#!/usr/bin/env bash
set -Eeuo pipefail

APP="smart-ssl"
VERSION="0.8.3"

SMARTSSL_REPO="${SMARTSSL_REPO:-Nima786/Smart-SSL}"
SMARTSSL_BRANCH="${SMARTSSL_BRANCH:-main}"
SMARTSSL_RAW_BASE="https://raw.githubusercontent.com/${SMARTSSL_REPO}/${SMARTSSL_BRANCH}"
SMARTSSL_BIN="/usr/local/bin/${APP}"

CONF_DIR="${SMARTSSL_CONF_DIR:-/etc/${APP}}"
DOM_DIR="${CONF_DIR}/domains"
MAIN_CONF="${CONF_DIR}/config.ini"
CF_CREDS="${SMARTSSL_CREDS_PATH:-/root/.secrets/cloudflare.ini}"
TMP_DIR="${SMARTSSL_TMP_DIR:-/run/${APP}}"

die() { echo "ERROR: $*" >&2; exit 1; }
have() { command -v "$1" >/dev/null 2>&1; }
ensure_root() { [[ ${EUID:-0} -eq 0 ]] || die "Run as root."; }

ensure_paths() {
  mkdir -p "$DOM_DIR" "$TMP_DIR"
  chmod 700 "$TMP_DIR"
  [[ -f "$MAIN_CONF" ]] || cat >"$MAIN_CONF" <<EOF
email=
propagation_seconds=90
creds=${CF_CREDS}
default_owner=root:root
default_chain_mode=copy
EOF
}

read_conf() {
  while IFS='=' read -r k v; do
    [[ "$k" =~ ^[a-z_]+$ ]] || continue
    eval "CFG_${k^^}='${v}'"
  done < <(grep -E "^[a-z_]+=" "$MAIN_CONF" || true)
}

# ……… (all functions from your current v0.8.2 remain the same up to these two) ………

# ---------- Numbered selector (prints list even when captured) ----------
_select_domain_from_list() {
  shopt -s nullglob
  mapfile -t files < <(printf "%s\n" "${DOM_DIR}"/*.conf 2>/dev/null || true)
  shopt -u nullglob
  local n=${#files[@]}
  (( n > 0 )) || { echo "(no managed domains)" >&2; return 1; }

  echo "Select a domain:" >&2
  local i=1 d
  for f in "${files[@]}"; do
    d=$(grep '^domain=' "$f" | cut -d= -f2)
    printf "  %d) %s\n" "$i" "$d" >&2
    ((i++))
  done
  echo "  0) Cancel" >&2
  local choice
  while true; do
    read -rp "Enter number: " choice
    [[ "$choice" =~ ^[0-9]+$ ]] || { echo "Enter a number." >&2; continue; }
    (( choice>=0 && choice<=n )) || { echo "Out of range." >&2; continue; }
    break
  done
  (( choice == 0 )) && { echo "Cancelled." >&2; return 1; }
  printf '%s\n' "${files[$((choice-1))]}"
  return 0
}

# --- 7) Enable auto-renew + set propagation seconds; patch only managed domains; dry-run managed only ---
cmd_enable_renew_and_test() {
  ensure_root; ensure_paths; read_conf

  # Deploy hook
  local hook="/usr/local/bin/${APP}-deploy"
  cat >"$hook" <<'EOF'
#!/usr/bin/env bash
set -Eeuo pipefail
APP="smart-ssl"
CONF_DIR="/etc/${APP}"
DOM_DIR="${CONF_DIR}/domains"
BIN="/usr/local/bin/${APP}"
shopt -s nullglob
for conf in "${DOM_DIR}"/*.conf; do
  dom=$(grep '^domain=' "$conf" | cut -d= -f2)
  [[ -n "$dom" ]] && "${BIN}" publish "$dom" || true
done
shopt -u nullglob
EOF
  chmod 0755 "$hook"
  mkdir -p /etc/letsencrypt/renewal-hooks/deploy
  ln -sfn "$hook" "/etc/letsencrypt/renewal-hooks/deploy/99-${APP}-deploy"
  systemctl enable --now certbot.timer || true
  echo "[*] Auto-renew enabled with deploy hook."

  # Ask for desired propagation seconds (default to 90 if 0/empty)
  local current_ps="${CFG_PROPAGATION_SECONDS:-90}"
  [[ -z "$current_ps" || "$current_ps" == "0" ]] && current_ps=90
  read -rp "Propagation seconds for DNS validation during renewals [${current_ps}]: " newps
  [[ -z "$newps" ]] && newps="$current_ps"
  # basic sanity
  [[ "$newps" =~ ^[0-9]+$ ]] || { echo "Invalid number; using 90."; newps=90; }
  (( newps < 10 )) && { echo "Too small; using 60."; newps=60; }

  # Update global default
  sed -i "s|^propagation_seconds=.*|propagation_seconds=${newps}|" "$MAIN_CONF"
  echo "[*] Using propagation window: ${newps}s"

  # Build managed list from Smart-SSL configs only
  shopt -s nullglob
  mapfile -t managed < <(grep -h '^domain=' "${DOM_DIR}"/*.conf 2>/dev/null | cut -d= -f2)
  shopt -u nullglob
  if ((${#managed[@]}==0)); then
    echo "(no managed domains; nothing to test)"; return 0
  fi

  # Patch renewal files ONLY for managed domains (prod + staging if present)
  for d in "${managed[@]}"; do
    for name in "$d" "${d}-staging"; do
      local rf="/etc/letsencrypt/renewal/${name}.conf"
      [[ -f "$rf" ]] || continue
      # Only touch dns-cloudflare certs
      grep -q '^\s*authenticator\s*=\s*dns-cloudflare' "$rf" || continue
      if grep -q '^\s*dns_cloudflare_propagation_seconds\s*=' "$rf"; then
        sed -i "s/^\s*dns_cloudflare_propagation_seconds\s*=.*/dns_cloudflare_propagation_seconds = ${newps}/" "$rf"
      else
        echo "dns_cloudflare_propagation_seconds = ${newps}" >> "$rf"
      fi
      echo "[*] Updated ${name}: dns_cloudflare_propagation_seconds=${newps}"
    done
  done

  echo "Saving debug log to /var/log/letsencrypt/letsencrypt.log"
  # Dry-run renew for managed names only (ignores orphan certs)
  for d in "${managed[@]}"; do
    for name in "$d" "${d}-staging"; do
      [[ -d "/etc/letsencrypt/live/${name}" ]] || continue
      echo "---- Dry-run: ${name} ----"
      certbot renew --dry-run --cert-name "${name}" || true
    done
  done
}

# --- 9) Remove (now cleans prod+staging renewal files when you delete certs) ---
cmd_remove() {
  ensure_root; ensure_paths
  local file; file="$(_select_domain_from_list)" || return 0
  local dom; dom=$(grep '^domain=' "$file" | cut -d= -f2)

  read -rp "Also revoke and delete Let's Encrypt certificates for '${dom}' (prod + staging if exist)? (y/N): " ans
  if [[ "${ans,,}" == "y" ]]; then
    # Delete both names if they exist
    certbot delete --cert-name "$dom" || true
    certbot delete --cert-name "${dom}-staging" || true
    # Remove any leftover renewal files explicitly
    rm -f "/etc/letsencrypt/renewal/${dom}.conf" "/etc/letsencrypt/renewal/${dom}-staging.conf" 2>/dev/null || true
  fi

  rm -f "$file"
  echo "[*] Removed domain '${dom}'."
}

# ……… menu + dispatcher unchanged from v0.8.2 ………
menu() {
  ensure_root; ensure_paths; read_conf; set +e
  while true; do
    clear
    echo "=== Smart-SSL Main Menu ==="
    echo "1) Install dependencies"
    echo "2) Setup (email + Cloudflare token)"
    echo "3) Add / Issue certificate (PRODUCTION)"
    echo "4) Add / Issue certificate (STAGING / TEST)"
    echo "5) List managed domains"
    echo "6) Change publish path & publish now"
    echo "7) Enable auto-renew + test now (dry-run)"
    echo "8) Rotate Cloudflare token"
    echo "9) Remove a domain"
    echo "10) Update Smart-SSL to latest"
    echo "11) Uninstall Smart-SSL"
    echo "0) Exit"
    echo
    read -rp "Select an option: " choice
    case "$choice" in
      1) cmd_install; read -rp "Press Enter to continue..." _ ;;
      2) cmd_setup; read -rp "Press Enter to continue..." _ ;;
      3) cmd_add; read -rp "Press Enter to continue..." _ ;;
      4) cmd_add_staging; read -rp "Press Enter to continue..." _ ;;
      5) cmd_list; read -rp "Press Enter to continue..." _ ;;
      6) cmd_change_publish; read -rp "Press Enter to continue..." _ ;;
      7) cmd_enable_renew_and_test; read -rp "Press Enter to continue..." _ ;;
      8) cmd_rotate_token; read -rp "Press Enter to continue..." _ ;;
      9) cmd_remove; read -rp "Press Enter to continue..." _ ;;
      10) cmd_self_update ;;
      11) cmd_uninstall ;;
      0) clear; set -e; exit 0 ;;
      *) echo "Invalid option"; sleep 1 ;;
    esac
  done
}

case "${1:-}" in
  install) shift; cmd_install "$@";;
  setup) shift; cmd_setup "$@";;
  add) shift; cmd_add "$@";;
  add-staging) shift; cmd_add_staging "$@";;
  list) shift; cmd_list "$@";;
  publish) shift; cmd_publish "${1:-}";;
  enable-renew) shift; cmd_enable_renew_and_test "$@";;
  rotate-token) shift; cmd_rotate_token "$@";;
  dry-run) shift; certbot renew --dry-run ;;
  remove) shift; cmd_remove "$@";;
  self-update) shift; cmd_self_update "$@";;
  uninstall) shift; cmd_uninstall "$@";;
  version) echo "${APP} ${VERSION}";;
  menu|'') menu ;;
  *) echo "(Tip: run 'smart-ssl' to open the interactive menu.)" ;;
esac
